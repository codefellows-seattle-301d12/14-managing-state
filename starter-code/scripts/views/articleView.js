(function(module) {

  var articleView = {};

  var render = function(article) {
    var template = Handlebars.compile($('#article-template').text());

    article.daysAgo =
      parseInt((new Date() - new Date(article.publishedOn))/60/60/24/1000);
    article.publishStatus =
      article.publishedOn ? 'published ' +
      article.daysAgo + ' days ago' : '(draft)';
    article.body = marked(article.body);

    return template(article);
  };

  // COMMENT: What does this method do?  What is it's execution path?
  /*
  1. Declares a variable options.
  2. Stores the function returned by Handlebars.compile in a variable called template
  3. Options will be an array of unique author strings that then gets mapped into a new array of option elements
     created by the Handlebars function stored in template, which wants an object, literally defined with one
     property, val, whose value is equal to the current author
  4. Then appends the contents of that array to the element with an ID of author-filter.
  5. It will then call Article.allCategories, passing in an anonymous function.
  6. Article.allCategories will give us the unique categories from the table articles, then call the anonymous
     function passed in with the argument of the response from the SQL call.
  7. Rows is the array of objects, with one property, "category", representing each unique category received
     from the SQL call.
  8. It will then append to the element with an ID of category-filter:
  9. The mapped array containing the HTML generated by our Handlebars function stored in template, passing in
     a literal object containing one property, val, whose value is each row object's category value.
  */
  articleView.populateFilters = function() {
    var options;
    var template = Handlebars.compile($('#option-template').text());
    options = Article.allAuthors()
      .map(function(author) {
        return template({val: author});
      });
    $('#author-filter').append(options);

    Article.allCategories(function(rows) {
      $('#category-filter').append(
        rows.map(function(row) {
          return template({val: row.category});
        })
      );
    });
  };

  // COMMENT: What does this method do?  What is it's execution path?
  /*
    1. Add a one-time event handler to all select elements that are descendants of elements with an ID of filters.
    2. When one of those elements changes, run an anonymous function that:
    3. Set resource equal to either author or category, by getting the element clicked on, its ID, and using
       .replace to change the string to replace -filter with an empty string.
       EX: If you clicked on a select element with ID "author-filter", then replace "-filter" with "", leaving
       you with "author"
    4. Then, find the select element's parent (which is a li element), its siblings (which are the other li
      elements), then its children (which are the other select elements), and change their values to an
      empty string. This will reset the values of all filters other than the one changed.
    5. Then, a page function will be called, passing in the url /resource/author or category, replacing
      all whitespace with a + sign.
      EX: If resource is author, and the value of the author-filter select is 'Virginia Swain', then page will
      use the URL /author/Virginia+Swain
  */
  articleView.handleFilters = function() {
    $('#filters').one('change', 'select', function() {
      var resource = this.id.replace('-filter', '');
      $(this).parent().siblings().children().val('');
      page('/' + resource + '/' +
      // Replace any/all whitespace with a '+' sign
        $(this).val().replace(/\W+/g, '+')
      );
    });
  };
/* articleView.handleAuthorFilter = function() {
     $('#author-filter').on('change', function() {
       if ($(this).val()) {
         $('article').hide();
         $('article[data-author="' + $(this).val() + '"]').fadeIn();
       } else {
         $('article').fadeIn();
         $('article.template').hide();
       }
       $('#category-filter').val('');
     });
   };

   articleView.handleCategoryFilter = function() {
     $('#category-filter').on('change', function() {
       if ($(this).val()) {
         $('article').hide();
         $('article[data-category="' + $(this).val() + '"]').fadeIn();
       } else {
         $('article').fadeIn();
`        $('article.template').hide();
        }
       $('#author-filter').val('');
     });
   };

   DONE: Remove the setTeasers method,
    and replace with a plain ole link in the article template.
   articleView.setTeasers = function() {
     $('.article-body *:nth-of-type(n+2)').hide();

     $('#articles').on('click', 'a.read-on', function(e) {
       e.preventDefault();
       $(this).parent().find('*').fadeIn();
       $(this).hide();
     });
   }; */

  // COMMENT: What does this method do?  What is it's execution path?
  articleView.index = function(articles) {
    $('#articles').show().siblings().hide();

    $('#articles article').remove();
    articles.forEach(function(a) {
      $('#articles').append(render(a));
    });

    articleView.populateFilters();
    articleView.handleFilters();

    // DONE: Replace setTeasers with just the truncation logic, if needed:
    if ($('#articles article').length > 1) {
      $('.article-body *:nth-of-type(n+2)').hide();
    }
  };

  module.articleView = articleView;
})(window);
